require 'chunky_png'

CODE128 = {
  0 => '11011001100', 1 => '11001101100', 2 => '11001100110',
  3 => '10010011000', 4 => '10010001100', 5 => '10001001100',
  6 => '10011001000', 7 => '10011000100', 8 => '10001100100',
  9 => '11001001000', 10 => '11001000100', 11 => '11000100100',
  12 => '10110011100', 13 => '10011011100', 14 => '10011001110',
  15 => '10111001100', 16 => '10011101100', 17 => '10011100110',
  18 => '11001110010', 19 => '11001011100', 20 => '11001001110',
  21 => '11011100100', 22 => '11001110100', 23 => '11101101110',
  24 => '11101001100', 25 => '11100101100', 26 => '11100100110',
  27 => '11101100100', 28 => '11100110100', 29 => '11100110010',
  30 => '11011011000', 31 => '11011000110', 32 => '11000110110',
  33 => '10100011000', 34 => '10001011000', 35 => '10001000110',
  36 => '10110001000', 37 => '10001101000', 38 => '10001100010',
  39 => '11010001000', 40 => '11000101000', 41 => '11000100010',
  42 => '10110111000', 43 => '10110001110', 44 => '10001101110',
  45 => '10111011000', 46 => '10111000110', 47 => '10001110110',
  48 => '11101110110', 49 => '11010001110', 50 => '11000101110',
  51 => '11011101000', 52 => '11011100010', 53 => '11011101110',
  54 => '11101011000', 55 => '11101000110', 56 => '11100010110',
  57 => '11101101000', 58 => '11101100010', 59 => '11100011010',
  60 => '11101111010', 61 => '11001000010', 62 => '11110001010',
  63 => '10100110000', 64 => '10100001100', 65 => '10010110000',
  66 => '10010000110', 67 => '10000101100', 68 => '10000100110',
  69 => '10110010000', 70 => '10110000100', 71 => '10011010000',
  72 => '10011000010', 73 => '10000110100', 74 => '10000110010',
  75 => '11000010010', 76 => '11001010000', 77 => '11110111010',
  78 => '11000010100', 79 => '10001111010', 80 => '10100111100',
  81 => '10010111100', 82 => '10010011110', 83 => '10111100100',
  84 => '10011110100', 85 => '10011110010', 86 => '11110100100',
  87 => '11110010100', 88 => '11110010010', 89 => '11011011110',
  90 => '11011110110', 91 => '11110110110', 92 => '10101111000',
  93 => '10100011110', 94 => '10001011110', 95 => '10111101000',
  96 => '10111100010', 97 => '11110101000', 98 => '11110100010',
  99 => '10111011110', 100 => '10111101110', 101 => '11101011110',
  102 => '11110101110', 103 => '11010000100', 104 => '11010010000',
  105 => '11010011100', 106 => '1100011101011'
}

CODE39 = {
  0 => '101001101101', 1 => '110100101011', 2 => '101100101011',
  3 => '110110010101', 4 => '101001101011', 5 => '110100110101',
  6 => '101100110101', 7 => '101001011011', 8 => '110100101101',
  9 => '101100101101', 'A' => '110101001011', 'B' => '101101001011',
  'C' => '110110100101', 'D' => '101011001011', 'E' => '110101100101',
  'F' => '101101100101', 'G' => '101010011011', 'H' => '110101001101',
  'I' => '101101001101', 'J' => '101011001101', 'K' => '110101010011',
  'L' => '101101010011', 'M' => '110110101001', 'N' => '101011010011',
  'O' => '110101101001', 'P' => '101101101001', 'Q' => '101010110011',
  'R' => '110101011001', 'S' => '101101011001', 'T' => '101011011001',
  'U' => '110010101011', 'V' => '100110101011', 'W' => '110011010101',
  'X' => '100101101011', 'Y' => '110010110101', 'Z' => '100110110101',
  '-' => '100101011011', '.' => '110010101101', ' ' => '100110101101',
  '$' => '100100100101', '/' => '100100101001', '+' => '100101001001',
  '%' => '101001001001', '*' => '100101101101'
}

class Code39
  CODE39 = {
    0 => '101001101101', 1 => '110100101011', 2 => '101100101011',
    3 => '110110010101', 4 => '101001101011', 5 => '110100110101',
    6 => '101100110101', 7 => '101001011011', 8 => '110100101101',
    9 => '101100101101', 'A' => '110101001011', 'B' => '101101001011',
    'C' => '110110100101', 'D' => '101011001011', 'E' => '110101100101',
    'F' => '101101100101', 'G' => '101010011011', 'H' => '110101001101',
    'I' => '101101001101', 'J' => '101011001101', 'K' => '110101010011',
    'L' => '101101010011', 'M' => '110110101001', 'N' => '101011010011',
    'O' => '110101101001', 'P' => '101101101001', 'Q' => '101010110011',
    'R' => '110101011001', 'S' => '101101011001', 'T' => '101011011001',
    'U' => '110010101011', 'V' => '100110101011', 'W' => '110011010101',
    'X' => '100101101011', 'Y' => '110010110101', 'Z' => '100110110101',
    '-' => '100101011011', '.' => '110010101101', ' ' => '100110101101',
    '$' => '100100100101', '/' => '100100101001', '+' => '100101001001',
    '%' => '101001001001', '*' => '100101101101'
  }

  def encode(barcode_string)
    encoded_string = '100101101101'			# Start code
    barcode_string.each_char do |s|
  	  encoded_string += CODE39[s.upcase]
    end
    encoded_string += '100101101101'		# End code
    encoded_string
  end

  def decode(barcode_string)
  	decoded_string = ''
    barcode_string.scan(/.{12}/).each do |s|
  	  decoded_string += CODE39.invert[s]
    end
    puts decoded_string
  end

  def draw(width, height, barcode_string)
    image = ChunkyPNG::Image.new(width, height, ChunkyPNG::Color::WHITE)
  end

  def testdraw
    testcode = self.encode('this')
    height = 50
    width = 500
    image = ChunkyPNG::Image.new(width, height, ChunkyPNG::Color::WHITE)

    x = 5
    testcode.scan(/.{12}/).each do |s|
      s.chars.each do |c|
        if c == '1'
          (0..height-1).each do |y|
            image[x, y] = ChunkyPNG::Color.rgb(0, 0, 0)
            image[x + 1, y] = ChunkyPNG::Color.rgb(0, 0, 0)
          end
        end
        x += 2
      end
      x += 2
    end
    image.save('testimage.png')

=begin
    (0..width-1).each do |x|
      if testcode.chars[x] == '1'
        (0..height-1).each do |y|
          image[(x*2), y] = ChunkyPNG::Color.rgb(0, 0, 0)
          image[(x*2) + 1, y] = ChunkyPNG::Color.rgb(0, 0, 0)
        end
      end
    end
    image.save('testimage.png')

    (0..width-1).each do |x|
      if x % 4 < 2
        (0..height-1).each do |y|
          image[x, y] = ChunkyPNG::Color.rgb(0, 0, 0)
        end
      end
    end
    image.save('testimage.png')

    image = ChunkyPNG::Image.new(20, 20, ChunkyPNG::Color::WHITE)
    image[1, 3] = ChunkyPNG::Color.rgb(0, 0, 0)
    image[2, 3] = ChunkyPNG::Color.rgb(0, 0, 255)
    image[10, 1] = ChunkyPNG::Color.rgb(255, 0, 0)
    image[10, 2] = ChunkyPNG::Color.rgb(255, 0, 0)
    image[10, 3] = ChunkyPNG::Color.rgb(255, 0, 0)
    image.save('testimage.png', :interlace => true)
=end
  end
end